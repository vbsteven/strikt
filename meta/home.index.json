{
  "ownKey": "home",
  "ownPages": [
    {
      "reference": {
        "path": "",
        "baseUrl": "https://strikt.io",
        "fileName": "",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://strikt.io"
      },
      "description": "",
      "title": "Strikt",
      "content": "\n<section class=\"columns is-centered\">\n  <div class=\"column is-half\">\n    <figure class=\"image\">\n      <img src=\"https://strikt.io/assets/images/logo.png\" alt=\"Strikt logo\">\n    <\/figure>\n  <\/div>\n<\/section>\n\n<section class=\"columns is-centered\">\n  <div class=\"column is-8\">\n    <div class=\"content is-medium\">\n      <p>\n        Strikt is an assertion library for Kotlin intended for use with a test runner such as <a\n        href=\"https://junit.org/junit5/\">JUnit<\/a> or <a href=\"http://spekframework.org/\">Spek<\/a>.\n      <\/p>\n      <p>Strikt gives you\u2026<\/p>\n    <\/div>\n  <\/div>\n<\/section>\n\n<section class=\"columns is-multiline is-gapless\">\n  <header class=\"column is-4 has-text-right-tablet\">\n    <div class=\"notification content is-medium\">\n      <h2 class=\"title is-4\">A powerful fluent API<\/h2>\n    <\/div>\n  <\/header>\n  <div class=\"column is-8 is-hidden-mobile\">\n    <div class=\"notification is-dark\"><\/div>\n  <\/div>\n\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      <p>Type-safe fluent assertions<\/p>\n\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">val subject = &quot;The Enlightened take things Lightly&quot;\nexpectThat(subject)\n  .hasLength(35)\n  .matches(Regex(&quot;[\\\\w\\\\s]+&quot;))\n  .startsWith(&quot;T&quot;)<\/code><\/pre>\n    <\/div>\n  \n\n<\/section>\n\n\n<section class=\"columns is-multiline is-gapless\">\n  <header class=\"column is-4 has-text-right-tablet\">\n    <div class=\"notification content is-medium\">\n      <h2 class=\"title is-4\">Collection handling<\/h2>\n    <\/div>\n  <\/header>\n  <div class=\"column is-8 is-hidden-mobile\">\n    <div class=\"notification is-dark\"><\/div>\n  <\/div>\n\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      <p>Flexible assertions about collections<\/p>\n\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">val subject = listOf(&quot;Eris&quot;, &quot;Thor&quot;, &quot;Anubis&quot;, &quot;Ra&quot;)\nexpectThat(subject)\n  .contains(&quot;Eris&quot;, &quot;Thor&quot;, &quot;Anubis&quot;)<\/code><\/pre>\n    <\/div>\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      <p>\u201cNarrow\u201d the assertion to elements or ranges<\/p>\n\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">expectThat(subject)[0].isEqualTo(&quot;Eris&quot;)<\/code><\/pre>\n    <\/div>\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      <p>Make grouping assertions<\/p>\n\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">val subject = Deity.values().map { it.toString() }\nexpectThat(subject)\n  .isNotEmpty()\n  .any { startsWith(&quot;E&quot;) }<\/code><\/pre>\n    <\/div>\n  \n\n<\/section>\n\n\n<section class=\"columns is-multiline is-gapless\">\n  <header class=\"column is-4 has-text-right-tablet\">\n    <div class=\"notification content is-medium\">\n      <h2 class=\"title is-4\">\u201cSoft\u201d assertions<\/h2>\n    <\/div>\n  <\/header>\n  <div class=\"column is-8 is-hidden-mobile\">\n    <div class=\"notification is-dark\"><\/div>\n  <\/div>\n\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      <p>Use lambdas to execute multiple assertions on a subject at once\u2026<\/p>\n\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">val subject = &quot;The Enlightened take things Lightly&quot;\nexpectThat(subject) {\n  hasLength(5)           // fails\n  matches(Regex(&quot;\\\\d+&quot;)) // fails\n  startsWith(&quot;T&quot;)        // still evaluated and passes\n}<\/code><\/pre>\n    <\/div>\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      <p>\u2026with structured diagnostics of those that fail<\/p>\n\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-text\">▼ Expect that &quot;The Enlightened take things Lightly&quot;:\n  ✗ has length 5 : found 35\n  ✗ matches the regular expression /\\d+/ : found &quot;The Enlightened take things Lightly&quot;\n  ✓ starts with &quot;T&quot;<\/code><\/pre>\n    <\/div>\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      <p>Use lambdas to execute assertions on multiple subjects at once\u2026<\/p>\n\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">val person1 = Person(name = &quot;David&quot;)\nval person2 = Person(name = &quot;Ziggy&quot;)\nexpect {\n  that(person1.name).isEqualTo(&quot;David&quot;)\n  that(person2.name).isEqualTo(&quot;Ziggy&quot;)\n}<\/code><\/pre>\n    <\/div>\n  \n\n<\/section>\n\n\n<section class=\"columns is-multiline is-gapless\">\n  <header class=\"column is-4 has-text-right-tablet\">\n    <div class=\"notification content is-medium\">\n      <h2 class=\"title is-4\">Strong typing<\/h2>\n    <\/div>\n  <\/header>\n  <div class=\"column is-8 is-hidden-mobile\">\n    <div class=\"notification is-dark\"><\/div>\n  <\/div>\n\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      <p>Assertion functions can &quot;narrow&quot; the type of the assertion<\/p>\n\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">val subject: Any? = &quot;The Enlightened take things Lightly&quot;\nexpectThat(subject) // type: Assertion&lt;Any?&gt;\n  .isNotNull()      // type: Assertion&lt;Any&gt;\n  .isA&lt;String&gt;()    // type: Assertion&lt;String&gt;\n  .matches(Regex(&quot;[\\\\w\\\\s]+&quot;))\n// only available on Assertion&lt;CharSequence&gt;<\/code><\/pre>\n    <\/div>\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      <p>Assertions can &quot;map&quot; to properties and method results in a type safe way:<\/p>\n\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">val subject = Pantheon.NORSE\nexpectThat(subject)\n  .get(Pantheon::ruler) // reference to a property\n  .get { toString() }   // return type of a method call\n  .isEqualTo(&quot;Odin&quot;)<\/code><\/pre>\n    <\/div>\n  \n\n<\/section>\n\n\n<section class=\"columns is-multiline is-gapless\">\n  <header class=\"column is-4 has-text-right-tablet\">\n    <div class=\"notification content is-medium\">\n      <h2 class=\"title is-4\">Extensibility<\/h2>\n    <\/div>\n  <\/header>\n  <div class=\"column is-8 is-hidden-mobile\">\n    <div class=\"notification is-dark\"><\/div>\n  <\/div>\n\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      <p>Custom assertions are extension functions<\/p>\n\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">fun Assertion.Builder&lt;LocalDate&gt;.isStTibsDay() =\n  assert(&quot;is St. Tib&#39;s Day&quot;) {\n    when (MonthDay.from(it)) {\n      MonthDay.of(2, 29) -&gt; pass()\n      else -&gt; fail()\n    }\n  }\nexpectThat(LocalDate.of(2020, 2, 29)).isStTibsDay()<\/code><\/pre>\n    <\/div>\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      <p>Custom mappings are extension properties<\/p>\n\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">val Assertion.Builder&lt;Pantheon&gt;.realm: Assertion.Builder&lt;String&gt;\n  get() = get { &quot;$ruler to $underworldRuler&quot; }\n\n  val subject = Pantheon.NORSE\n  expectThat(subject)\n    .realm\n    .isEqualTo(&quot;Odin to Hel&quot;)<\/code><\/pre>\n    <\/div>\n  \n\n<\/section>\n\n"
    },
    {
      "reference": {
        "path": "",
        "baseUrl": "https://strikt.io",
        "fileName": "404",
        "extension": "html",
        "usePrettyUrl": false,
        "link": "https://strikt.io/404.html"
      },
      "description": "",
      "title": "Strikt",
      "content": ""
    }
  ]
}